{
  "version": 3,
  "sources": ["../../react-minimal-pie-chart/src/utils.ts", "../../react-minimal-pie-chart/src/Chart/extendData.ts", "../../react-minimal-pie-chart/src/Label.tsx", "../../react-minimal-pie-chart/src/Chart/renderLabels.tsx", "../../react-minimal-pie-chart/node_modules/svg-partial-circle/index.js", "../../react-minimal-pie-chart/src/Path.tsx", "../../react-minimal-pie-chart/src/Chart/renderSegments.tsx", "../../react-minimal-pie-chart/src/Chart/Chart.tsx"],
  "sourcesContent": ["export function degreesToRadians(degrees: number) {\n  return (degrees * Math.PI) / 180;\n}\n\nexport function valueBetween(value: number, min: number, max: number) {\n  if (value > max) return max;\n  if (value < min) return min;\n  return value;\n}\n\nexport function extractPercentage(value: number, percentage: number) {\n  return (percentage / 100) * value;\n}\n\nexport function bisectorAngle(startAngle: number, lengthAngle: number) {\n  return startAngle + lengthAngle / 2;\n}\n\nexport function shiftVectorAlongAngle(angle: number, distance: number) {\n  const angleRadians = degreesToRadians(angle);\n  return {\n    dx: distance * Math.cos(angleRadians),\n    dy: distance * Math.sin(angleRadians),\n  };\n}\n\nexport function isNumber(value: unknown): value is number {\n  return typeof value === 'number';\n}\n\n/**\n * Conditionally return a prop or a function prop result\n */\nexport function functionProp<ReturnedProp, Payload>(\n  prop: ((args: Payload) => ReturnedProp) | ReturnedProp,\n  payload: Payload\n): ReturnedProp {\n  return typeof prop === 'function'\n    ? // @ts-expect-error: cannot find a way to type 2nd prop arg as anything-but-function\n      prop(payload)\n    : prop;\n}\n", "import { extractPercentage, valueBetween } from '../utils';\nimport type { Data, BaseDataEntry, ExtendedData } from '../commonTypes';\nimport type { PropsWithDefaults as ChartProps } from './Chart';\n\nfunction sumValues<DataEntry extends BaseDataEntry>(\n  data: Data<DataEntry>\n): number {\n  let sum = 0;\n  for (let i = 0; i < data.length; i++) {\n    sum += data[i].value;\n  }\n  return sum;\n}\n\n// Append \"percentage\", \"degrees\" and \"startAngle\" to each data entry\nexport default function extendData<DataEntry extends BaseDataEntry>({\n  data,\n  lengthAngle: totalAngle,\n  totalValue,\n  paddingAngle,\n  startAngle: chartStartAngle,\n}: ChartProps<DataEntry>): ExtendedData<DataEntry> {\n  const total = totalValue || sumValues(data);\n  const normalizedTotalAngle = valueBetween(totalAngle, -360, 360);\n  const numberOfPaddings =\n    Math.abs(normalizedTotalAngle) === 360 ? data.length : data.length - 1;\n  const singlePaddingDegrees = Math.abs(paddingAngle) * Math.sign(totalAngle);\n  const degreesTakenByPadding = singlePaddingDegrees * numberOfPaddings;\n  const degreesTakenByPaths = normalizedTotalAngle - degreesTakenByPadding;\n  let lastSegmentEnd = 0;\n  const extendedData: ExtendedData<DataEntry> = [];\n\n  // @NOTE: Shall we evaluate percentage accordingly to dataEntry.value's sign?\n  for (let i = 0; i < data.length; i++) {\n    const dataEntry = data[i];\n    const valueInPercentage = total === 0 ? 0 : (dataEntry.value / total) * 100;\n    const degrees = extractPercentage(degreesTakenByPaths, valueInPercentage);\n    const startAngle = lastSegmentEnd + chartStartAngle;\n    lastSegmentEnd = lastSegmentEnd + degrees + singlePaddingDegrees;\n    extendedData.push(\n      Object.assign(\n        {\n          percentage: valueInPercentage,\n          startAngle,\n          degrees,\n        },\n        dataEntry\n      )\n    );\n  }\n  return extendedData;\n}\n", "import React from 'react';\nimport type { CSSProperties, SVGProps } from 'react';\nimport type {\n  ExtendedData,\n  BaseDataEntry,\n  LabelRenderFunction,\n} from './commonTypes';\n\nexport type LabelRenderProps<DataEntry extends BaseDataEntry> = {\n  x: number;\n  y: number;\n  dx: number;\n  dy: number;\n  textAnchor: string;\n  dataEntry: ExtendedData<DataEntry>[number];\n  dataIndex: number;\n  style?: CSSProperties;\n};\n\nexport default function ReactMinimalPieChartLabel<\n  DataEntry extends BaseDataEntry,\n>({\n  renderLabel,\n  labelProps,\n}: {\n  renderLabel: LabelRenderFunction<DataEntry>;\n  labelProps: LabelRenderProps<DataEntry>;\n}) {\n  const label = renderLabel(labelProps);\n\n  // Default label\n  if (typeof label === 'string' || typeof label === 'number') {\n    const { dataEntry, dataIndex, ...props } = labelProps;\n    return (\n      <text dominantBaseline=\"central\" {...props}>\n        {label}\n      </text>\n    );\n  }\n\n  if (React.isValidElement(label)) {\n    return label;\n  }\n\n  return null;\n}\n", "import React from 'react';\nimport Label from '../Label';\nimport {\n  bisectorAngle,\n  extractPercentage,\n  functionProp,\n  shiftVectorAlongAngle,\n} from '../utils';\nimport type { PropsWithDefaults as ChartProps } from './Chart';\nimport type { LabelRenderProps } from '../Label';\nimport type { ExtendedData, BaseDataEntry } from '../commonTypes';\n\nfunction round(number: number): number {\n  const divisor = 1e14; // 14 decimals\n  return Math.round((number + Number.EPSILON) * divisor) / divisor;\n}\n\nfunction evaluateTextAnchorPosition({\n  labelPosition,\n  lineWidth,\n  labelHorizontalShift,\n}: {\n  labelPosition: number;\n  lineWidth: number;\n  labelHorizontalShift: number;\n}) {\n  const dx = round(labelHorizontalShift);\n  // Label in the vertical center\n  if (dx === 0) {\n    return 'middle';\n  }\n  // Outward label\n  if (labelPosition > 100) {\n    return dx > 0 ? 'start' : 'end';\n  }\n  // Inward label\n  const innerRadius = 100 - lineWidth;\n  if (labelPosition < innerRadius) {\n    return dx > 0 ? 'end' : 'start';\n  }\n  // Overlying label\n  return 'middle';\n}\n\nfunction makeLabelRenderProps<DataEntry extends BaseDataEntry>(\n  data: ExtendedData<DataEntry>,\n  props: ChartProps<DataEntry>\n): LabelRenderProps<DataEntry>[] {\n  return data.map((dataEntry, index) => {\n    const segmentsShift = functionProp(props.segmentsShift, index) ?? 0;\n    const distanceFromCenter =\n      extractPercentage(props.radius, props.labelPosition) + segmentsShift;\n    const { dx, dy } = shiftVectorAlongAngle(\n      bisectorAngle(dataEntry.startAngle, dataEntry.degrees),\n      distanceFromCenter\n    );\n\n    // This object is passed as argument to the \"label\" function prop\n    const labelRenderProps: LabelRenderProps<DataEntry> = {\n      x: props.center[0],\n      y: props.center[1],\n      dx,\n      dy,\n      textAnchor: evaluateTextAnchorPosition({\n        labelPosition: props.labelPosition,\n        lineWidth: props.lineWidth,\n        labelHorizontalShift: dx,\n      }),\n      dataEntry,\n      dataIndex: index,\n      style: functionProp(props.labelStyle, index),\n    };\n\n    return labelRenderProps;\n  });\n}\n\nexport default function renderLabels<DataEntry extends BaseDataEntry>(\n  data: ExtendedData<DataEntry>,\n  props: ChartProps<DataEntry>\n) {\n  const { label } = props;\n  if (label) {\n    return makeLabelRenderProps(data, props).map((labelRenderProps, index) => (\n      <Label\n        key={`label-${labelRenderProps.dataEntry.key || index}`}\n        renderLabel={label}\n        labelProps={labelRenderProps}\n      />\n    ));\n  }\n}\n", "'use strict'\n\n// from http://stackoverflow.com/a/18473154\nconst partialCircle = (cx, cy, r, start, end) => {\n\tconst length = end - start\n\tif (length === 0) return []\n\n\tconst fromX = r * Math.cos(start) + cx\n\tconst fromY = r * Math.sin(start) + cy\n\tconst toX = r * Math.cos(end) + cx\n\tconst toY = r * Math.sin(end) + cy\n\tconst large = Math.abs(length) <= Math.PI ? '0' : '1'\n\tconst sweep = length < 0 ? '0' : '1'\n\n\treturn [\n\t\t['M', fromX, fromY],\n\t\t['A', r, r, 0, large, sweep, toX, toY]\n\t]\n}\n\nmodule.exports = partialCircle\n", "import React from 'react';\nimport type { SVGProps } from 'react';\nimport partialCircle from 'svg-partial-circle';\nimport {\n  bisectorAngle,\n  degreesToRadians,\n  extractPercentage,\n  isNumber,\n  shiftVectorAlongAngle,\n  valueBetween,\n} from './utils';\n\nexport function makePathCommands(\n  cx: number,\n  cy: number,\n  startAngle: number,\n  lengthAngle: number,\n  radius: number\n): string {\n  const patchedLengthAngle = valueBetween(lengthAngle, -359.999, 359.999);\n\n  return partialCircle(\n    cx,\n    cy, // center X and Y\n    radius,\n    degreesToRadians(startAngle),\n    degreesToRadians(startAngle + patchedLengthAngle)\n  )\n    .map((command) => command.join(' '))\n    .join(' ');\n}\n\ntype Props = SVGProps<SVGPathElement> & {\n  cx: number;\n  cy: number;\n  lengthAngle: number;\n  lineWidth: number;\n  radius: number;\n  reveal?: number;\n  rounded?: boolean;\n  shift?: number;\n  startAngle: number;\n  title?: string | number;\n};\n\nexport default function ReactMinimalPieChartPath({\n  cx,\n  cy,\n  lengthAngle,\n  lineWidth,\n  radius,\n  shift = 0,\n  reveal,\n  rounded,\n  startAngle,\n  title,\n  ...props\n}: Props) {\n  const pathRadius = radius - lineWidth / 2;\n  //@NOTE This shift might be rendered as a translation in future\n  const { dx, dy } = shiftVectorAlongAngle(\n    bisectorAngle(startAngle, lengthAngle),\n    shift\n  );\n\n  const pathCommands = makePathCommands(\n    cx + dx,\n    cy + dy,\n    startAngle,\n    lengthAngle,\n    pathRadius\n  );\n  let strokeDasharray;\n  let strokeDashoffset;\n\n  // Animate/hide paths with \"stroke-dasharray\" + \"stroke-dashoffset\"\n  // https://css-tricks.com/svg-line-animation-works/\n  if (isNumber(reveal)) {\n    const pathLength = degreesToRadians(pathRadius) * lengthAngle;\n    strokeDasharray = Math.abs(pathLength);\n    strokeDashoffset =\n      strokeDasharray - extractPercentage(strokeDasharray, reveal);\n  }\n\n  return (\n    <path\n      d={pathCommands}\n      fill=\"none\"\n      strokeWidth={lineWidth}\n      strokeDasharray={strokeDasharray}\n      strokeDashoffset={strokeDashoffset}\n      strokeLinecap={rounded ? 'round' : undefined}\n      {...props}\n    >\n      {title && <title>{title}</title>}\n    </path>\n  );\n}\n", "import React from 'react';\nimport type { CSSProperties, SyntheticEvent } from 'react';\nimport Path from '../Path';\nimport { extractPercentage, functionProp, isNumber } from '../utils';\nimport type { ExtendedData, BaseDataEntry } from '../commonTypes';\nimport type { PropsWithDefaults as ChartProps } from './Chart';\n\nfunction combineSegmentTransitionsStyle(\n  duration: number,\n  easing: string,\n  customStyle?: CSSProperties\n): { transition: string } {\n  // Merge chart's animation CSS transition with \"transition\" found to customStyle\n  let transition = `stroke-dashoffset ${duration}ms ${easing}`;\n  if (customStyle && customStyle.transition) {\n    transition = `${transition},${customStyle.transition}`;\n  }\n  return {\n    transition,\n  };\n}\n\nfunction getRevealValue({\n  reveal,\n  animate,\n}: Pick<ChartProps, 'reveal' | 'animate'>) {\n  //@NOTE When animation is on, chart has to be fully revealed when reveal is not set\n  if (animate && !isNumber(reveal)) {\n    return 100;\n  }\n  return reveal;\n}\n\nfunction makeEventHandler<\n  Event extends SyntheticEvent,\n  Payload,\n  EventHandler extends (event: Event, payload: Payload) => void,\n>(eventHandler: undefined | EventHandler, payload: Payload) {\n  return (\n    eventHandler &&\n    ((e: Event) => {\n      eventHandler(e, payload);\n    })\n  );\n}\n\nexport default function renderSegments<DataEntry extends BaseDataEntry>(\n  data: ExtendedData<DataEntry>,\n  props: ChartProps<DataEntry>,\n  revealOverride?: null | number\n) {\n  // @NOTE this should go in Path component. Here for performance reasons\n  const reveal = revealOverride ?? getRevealValue(props);\n  const {\n    radius,\n    center: [cx, cy],\n  } = props;\n  const lineWidth = extractPercentage(radius, props.lineWidth);\n  const paths = data.map((dataEntry, index) => {\n    const segmentsStyle = functionProp(props.segmentsStyle, index);\n    return (\n      <Path\n        cx={cx}\n        cy={cy}\n        key={dataEntry.key || index}\n        lengthAngle={dataEntry.degrees}\n        lineWidth={lineWidth}\n        radius={radius}\n        rounded={props.rounded}\n        reveal={reveal}\n        shift={functionProp(props.segmentsShift, index)}\n        startAngle={dataEntry.startAngle}\n        title={dataEntry.title}\n        style={Object.assign(\n          {},\n          segmentsStyle,\n          props.animate &&\n            combineSegmentTransitionsStyle(\n              props.animationDuration,\n              props.animationEasing,\n              segmentsStyle\n            )\n        )}\n        stroke={dataEntry.color}\n        tabIndex={props.segmentsTabIndex}\n        onBlur={makeEventHandler(props.onBlur, index)}\n        onClick={makeEventHandler(props.onClick, index)}\n        onFocus={makeEventHandler(props.onFocus, index)}\n        onKeyDown={makeEventHandler(props.onKeyDown, index)}\n        onMouseOver={makeEventHandler(props.onMouseOver, index)}\n        onMouseOut={makeEventHandler(props.onMouseOut, index)}\n      />\n    );\n  });\n\n  if (props.background) {\n    paths.unshift(\n      <Path\n        cx={cx}\n        cy={cy}\n        key=\"bg\"\n        lengthAngle={props.lengthAngle}\n        lineWidth={lineWidth}\n        radius={radius}\n        rounded={props.rounded}\n        startAngle={props.startAngle}\n        stroke={props.background}\n      />\n    );\n  }\n\n  return paths;\n}\n", "import React, { useState, useEffect } from 'react';\nimport type {\n  CSSProperties,\n  FocusEvent,\n  KeyboardEvent,\n  MouseEvent,\n  ReactNode,\n} from 'react';\nimport extendData from './extendData';\nimport renderLabels from './renderLabels';\nimport renderSegments from './renderSegments';\nimport type { Data, BaseDataEntry, LabelRenderFunction } from '../commonTypes';\n\nexport type Props<DataEntry extends BaseDataEntry = BaseDataEntry> = {\n  animate?: boolean;\n  animationDuration?: number;\n  animationEasing?: string;\n  background?: string;\n  center?: [number, number];\n  children?: ReactNode;\n  className?: string;\n  data: Data<DataEntry>;\n  lengthAngle?: number;\n  lineWidth?: number;\n  label?: LabelRenderFunction<DataEntry>;\n  labelPosition?: number;\n  labelStyle?:\n    | CSSProperties\n    | ((dataIndex: number) => CSSProperties | undefined);\n  onBlur?: (event: FocusEvent, dataIndex: number) => void;\n  onClick?: (event: MouseEvent, dataIndex: number) => void;\n  onFocus?: (event: FocusEvent, dataIndex: number) => void;\n  onKeyDown?: (event: KeyboardEvent, dataIndex: number) => void;\n  onMouseOut?: (event: MouseEvent, dataIndex: number) => void;\n  onMouseOver?: (event: MouseEvent, dataIndex: number) => void;\n  paddingAngle?: number;\n  radius?: number;\n  reveal?: number;\n  rounded?: boolean;\n  segmentsShift?: number | ((dataIndex: number) => number | undefined);\n  segmentsStyle?:\n    | CSSProperties\n    | ((dataIndex: number) => CSSProperties | undefined);\n  segmentsTabIndex?: number;\n  startAngle?: number;\n  style?: CSSProperties;\n  totalValue?: number;\n  viewBoxSize?: [number, number];\n};\n\nexport const defaultProps = {\n  animationDuration: 500,\n  animationEasing: 'ease-out',\n  center: [50, 50] as [number, number],\n  data: [] as Data,\n  labelPosition: 50,\n  lengthAngle: 360,\n  lineWidth: 100,\n  paddingAngle: 0,\n  radius: 50,\n  startAngle: 0,\n  viewBoxSize: [100, 100] as [number, number],\n};\n\nexport type PropsWithDefaults<DataEntry extends BaseDataEntry = BaseDataEntry> =\n  Props<DataEntry> & typeof defaultProps;\n\nfunction makePropsWithDefaults<DataEntry extends BaseDataEntry>(\n  props: Props<DataEntry>\n): PropsWithDefaults<DataEntry> {\n  const result: PropsWithDefaults<DataEntry> = Object.assign(\n    {},\n    defaultProps,\n    props\n  );\n\n  // @NOTE Object.assign doesn't default properties with undefined value (like React defaultProps does)\n  let key: keyof typeof defaultProps;\n  for (key in defaultProps) {\n    if (props[key] === undefined) {\n      // @ts-expect-error: TS cannot ensure we're assigning the expected props accross abjects\n      result[key] = defaultProps[key];\n    }\n  }\n\n  return result;\n}\n\nexport function ReactMinimalPieChart<DataEntry extends BaseDataEntry>(\n  originalProps: Props<DataEntry>\n) {\n  const props = makePropsWithDefaults(originalProps);\n  const [revealOverride, setRevealOverride] = useState(\n    props.animate ? 0 : null\n  );\n\n  useEffect(() => {\n    if (props.animate) {\n      // Trigger initial animation\n      setRevealOverride(null);\n    }\n  }, []);\n\n  const extendedData = extendData(props);\n  return (\n    <svg\n      viewBox={`0 0 ${props.viewBoxSize[0]} ${props.viewBoxSize[1]}`}\n      width=\"100%\"\n      height=\"100%\"\n      className={props.className}\n      style={props.style}\n    >\n      {renderSegments(extendedData, props, revealOverride)}\n      {renderLabels(extendedData, props)}\n      {props.children}\n    </svg>\n  );\n}\n"],
  "mappings": "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",
  "names": ["degreesToRadians", "degrees", "Math", "PI", "valueBetween", "value", "min", "max", "extractPercentage", "percentage", "bisectorAngle", "startAngle", "lengthAngle", "shiftVectorAlongAngle", "angle", "distance", "angleRadians", "dx", "cos", "dy", "sin", "isNumber", "functionProp", "prop", "payload", "sumValues", "data", "sum", "i", "length", "extendData", "_ref", "totalAngle", "totalValue", "paddingAngle", "chartStartAngle", "total", "normalizedTotalAngle", "numberOfPaddings", "abs", "singlePaddingDegrees", "sign", "degreesTakenByPadding", "degreesTakenByPaths", "lastSegmentEnd", "extendedData", "dataEntry", "valueInPercentage", "push", "Object", "assign", "ReactMinimalPieChartLabel", "renderLabel", "labelProps", "label", "dataIndex", "props", "_objectWithoutPropertiesLoose", "_excluded", "React", "createElement", "dominantBaseline", "isValidElement", "round", "number", "divisor", "Number", "EPSILON", "evaluateTextAnchorPosition", "labelPosition", "lineWidth", "labelHorizontalShift", "innerRadius", "makeLabelRenderProps", "map", "index", "_functionProp", "segmentsShift", "distanceFromCenter", "radius", "_shiftVectorAlongAngl", "labelRenderProps", "x", "center", "y", "textAnchor", "style", "labelStyle", "renderLabels", "Label", "key", "partialCircle", "cx", "cy", "r", "start", "end", "fromX", "fromY", "toX", "toY", "large", "sweep", "module", "makePathCommands", "patchedLengthAngle", "command", "join", "ReactMinimalPieChartPath", "_ref$shift", "shift", "reveal", "rounded", "title", "pathRadius", "pathCommands", "strokeDasharray", "strokeDashoffset", "pathLength", "d", "fill", "strokeWidth", "strokeLinecap", "undefined", "combineSegmentTransitionsStyle", "duration", "easing", "customStyle", "transition", "getRevealValue", "animate", "makeEventHandler", "eventHandler", "e", "renderSegments", "revealOverride", "_props$center", "paths", "segmentsStyle", "Path", "animationDuration", "animationEasing", "stroke", "color", "tabIndex", "segmentsTabIndex", "onBlur", "onClick", "onFocus", "onKeyDown", "onMouseOver", "onMouseOut", "background", "unshift", "defaultProps", "viewBoxSize", "makePropsWithDefaults", "result", "ReactMinimalPieChart", "originalProps", "_useState", "useState", "setRevealOverride", "useEffect", "viewBox", "width", "height", "className", "children"]
}
